package com.study.korea_sleeptech_servlet.이론;

public class Servlet01 {
    /*
     *  ===== 서블릿(Servlet) =====
     *
     * 1. 서블릿이란?
     * : 자바(Java) 언어로 작성된 '웹 서버'에서 실행되는 프로그램
     * - 클라이언트의 요청(Request)을 처리하고, 응답(Response)을 생성하는 역할
     * >> 웹 애플리케이션의 백엔드 역할을 하는 자바 클래스
     *
     * 2. 서블릿 사용 목적
     * : '요청을 처리하고 응답을 생성'하는 프로그램이 '서블릿(Servlet)'
     *
     * cf) 웹 애플리케이션의 동작 구조
     * [1) 사용자가 브라우저를 통해 URL 입력 (요청 발생)]
     * >> [2) 요청이 웹 서버로 전달됨 EX. Apache, Tomcat]
     * >> [3) 서버는 요청 처리용 프로그램을 호출하여 작업을 수행]
     * >> [4) 처리된 결과를 HTML 등으로 만들어서 응답]
     * >> [5) 응답 결과를 사용자 브라우저에 표시]
     *
     * 3. 서블릿의 특징
     * : 웹 서버에서 동작하는 자바 기반 서버 프로그램
     * : HTTP 요청을 받아서 처리 + HTTP 응답을 생성
     * - 톰캣(Tomcat)과 같은 서블릿 컨테이너에서 실행됨
     *
     * 4. 서블릿의 기능
     * - HTTP 요청 처리
     * - 비즈니스 로직 수행
     * - HTML 또는 JSON 응답 생성
     * - 세션 관리, 쿠키 처리
     *
     * cf) 서블릿이 동작하는 구조
     * [사용자 브라우저]
     * |
     * | "요청(HTTP Request)"
     * |
     * [웹 서버(Tomcat) >(전달)> 서블릿 클래스]
     * |
     * | "처리 로직 수행 + 응답(HTTP Response)"
     * |
     * [사용자 브라우저]
     *
     * 5. 서블릿과 스프링의 관계
     * : Spring Framework는 내부적으로 서블릿을 기반으로 만들어짐
     * - 서블릿은 스프링의 기초가 되는 기술
     *
     * 6. 용어 정리
     * 1) 서블릿(Servlet): HTTP 요청 처리 자바 클래스
     * 2) 컨테이너(Container): 서블릿을 실행시켜주는 환경 (EX. 톰캣)
     * 3) 요청/응답: 사용자가 보내는 정보/서버가 사용자에게 보내는 결과
     *
     * === 서블릿 VS 스프링 ===
     * 1) 서블릿: 모든 일을 직접 처리
     *   >> 요청 처리와 응답 생성을 모두 서블릿 내에서 동작
     *
     * 2) 스프링: DispatcherServlet(매니저)가 일처리를 지시
     *   >> 요청을 DispatcherServlet이 받아 컨트롤러, 서비스, 리포지토리 등의 역할을 분담하여 동작시킴
     *       + 결과를 모아 응답 전송
     * */
}